package com.example.demo.service;

import java.util.List;
import java.util.Optional;

import org.jspecify.annotations.Nullable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.demo.entity.User;
import com.example.demo.repository.UserRepository;

import jakarta.annotation.Nonnull;

/**
 * Service for user-related operations.
 */
@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    /**
     * Get all users.
     *
     * @return list of all users
     */
    public @Nonnull List<User> getAllUsers() {
        return userRepository.findAll();
    }

    /**
     * Find a user by ID.
     *
     * @param id the user ID
     * @return the user if found, otherwise empty
     */
    public @Nonnull Optional<User> getUserById(@Nullable Long id) {
        if (id == null) {
            return Optional.empty();
        }
        return userRepository.findById(id);
    }

    /**
     * Create or update a user.
     *
     * @param user the user to save
     * @return the saved user
     */
    @Transactional
    public @Nonnull User saveUser(@Nonnull User user) {
        return userRepository.save(user);
    }

    /**
     * Create a default user with a timestamp-based email.
     *
     * @return the created user
     */
    @Transactional
    public @Nonnull User createDefaultUser() {
        User defaultUser = new User("AutoGenerated", "auto" + System.currentTimeMillis() + "@example.com");
        return userRepository.save(defaultUser);
    }

    /**
     * Ensure that default system users exist in the database.
     *
     * @return list of all users after ensuring defaults
     */
    @Transactional
    public @Nonnull List<User> ensureDefaultUsers() {
        List<User> existingUsers = userRepository.findAll();

        if (existingUsers.isEmpty()) {
            // Add standard system users
            userRepository.save(new User("System", "system@example.com"));
            userRepository.save(new User("Anonymous", "anonymous@example.com"));
            userRepository.save(new User("ChatBot", "chatbot@example.com"));
        }

        return userRepository.findAll();
    }
}
